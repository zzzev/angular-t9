// Generated by CoffeeScript 1.6.2
(function() {
  var t9App;

  t9App = angular.module('t9App', []);

  t9App.controller('T9Controller', function($scope, $http) {
    $scope.input = "2273";
    $scope.onlyShowWords = true;
    $scope.trie = {};
    $scope.suggestions = [];
    $http.get('data.json').success(function(data) {
      $scope.words = data.words;
      $scope.trie = $scope.buildTrie($scope.words);
      $scope.keys = data.keys;
      return $scope.updateSuggestions();
    });
    $scope.$watch('input', function(current, old) {
      $scope.input = $scope.input.replace(/[\D]/gi, '');
      if ($scope.maxInputLength && $scope.input.length > $scope.maxInputLength) {
        $scope.input = $scope.input.slice(0, $scope.maxInputLength);
      }
      return $scope.updateSuggestions();
    });
    $scope.$watch('onlyShowWords', function(current, old) {
      return $scope.updateSuggestions();
    });
    $scope.buildTrie = function(words) {
      var base, letter, trie, word, _i, _j, _len, _len1;

      trie = {};
      for (_i = 0, _len = words.length; _i < _len; _i++) {
        word = words[_i];
        base = trie;
        for (_j = 0, _len1 = word.length; _j < _len1; _j++) {
          letter = word[_j];
          if (!base[letter]) {
            base[letter] = {};
          }
          base = base[letter];
        }
        base.word = true;
      }
      return trie;
    };
    $scope.keydown = function(e) {
      if (e.keyCode === 8) {
        e.preventDefault();
        return $scope.input = $scope.input.slice(0, $scope.input.length - 1);
      }
    };
    $scope.keypress = function(e) {
      if (e.keyCode >= 48 && e.keyCode <= 57) {
        e.preventDefault();
        return $scope.input += (e.keyCode - 48).toString();
      }
    };
    $scope.dial = function(numPressed) {
      return $scope.input += numPressed;
    };
    $scope.updateSuggestions = function() {
      return $scope.suggestions = $scope.getPossibleWords($scope.input);
    };
    $scope.lookupWordPath = function(wordPath) {
      var base, letter, _i, _len;

      base = $scope.trie;
      for (_i = 0, _len = wordPath.length; _i < _len; _i++) {
        letter = wordPath[_i];
        if (base[letter]) {
          base = base[letter];
        } else {
          return false;
        }
      }
      return true;
    };
    $scope.lookupWord = function(word) {
      var base, letter, _i, _len;

      base = $scope.trie;
      for (_i = 0, _len = word.length; _i < _len; _i++) {
        letter = word[_i];
        if (base[letter]) {
          base = base[letter];
        } else {
          return false;
        }
      }
      return base.word;
    };
    return $scope.getPossibleWords = function(numberSequence) {
      var digit, letter, newSet, word, wordPath, wordPaths, _i, _j, _k, _len, _len1, _len2, _ref;

      if (typeof numberSequence === 'number') {
        numberSequence = numberSequence.toString();
      }
      numberSequence = numberSequence.replace(/[01]/g, '');
      numberSequence = numberSequence.split('');
      wordPaths = [''];
      for (_i = 0, _len = numberSequence.length; _i < _len; _i++) {
        digit = numberSequence[_i];
        newSet = [];
        for (_j = 0, _len1 = wordPaths.length; _j < _len1; _j++) {
          wordPath = wordPaths[_j];
          _ref = $scope.keys[digit - 1].letters;
          for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
            letter = _ref[_k];
            word = wordPath + letter;
            if (!$scope.onlyShowWords || $scope.lookupWordPath(word)) {
              newSet.push(word);
            }
          }
        }
        wordPaths = newSet;
      }
      if ($scope.onlyShowWords) {
        wordPaths = wordPaths.filter(function(element) {
          return $scope.lookupWord(element);
        });
      }
      return wordPaths;
    };
  });

}).call(this);
